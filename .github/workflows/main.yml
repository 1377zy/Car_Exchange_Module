name: Car Exchange Module CI/CD Pipeline

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  # Test job
  test:
    name: Test
    runs-on: ubuntu-latest
    
    services:
      # MongoDB service container
      mongodb:
        image: mongo:6.0
        ports:
          - 27017:27017
        env:
          MONGO_INITDB_DATABASE: car_exchange_test
      
      # Redis service container (optional)
      redis:
        image: redis:7
        ports:
          - 6379:6379
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
      
      # Install dependencies
      - name: Install dependencies
        run: npm ci
      
      # Run tests (if available)
      - name: Run tests
        run: npm test
        env:
          NODE_ENV: test
          MONGODB_URI: mongodb://localhost:27017/car_exchange_test
          JWT_SECRET: test_jwt_secret
          REDIS_ENABLED: false
        continue-on-error: true
      
      # Client tests (if available)
      - name: Install client dependencies
        run: |
          if [ -d "./client" ]; then
            cd client && npm ci
          fi
        continue-on-error: true
      
      - name: Run client tests
        run: |
          if [ -d "./client" ]; then
            cd client && npm test
          fi
        env:
          CI: true
        continue-on-error: true
  
  # Build job
  build:
    name: Build
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
      
      # Install dependencies
      - name: Install dependencies
        run: npm ci
      
      # Build client (if available)
      - name: Build client
        run: |
          if [ -d "./client" ]; then
            cd client && npm ci && npm run build
          fi
        env:
          REACT_APP_API_URL: ${{ secrets.REACT_APP_API_URL || 'http://localhost:5000' }}
        continue-on-error: true
      
      # Package application
      - name: Create deployment package
        run: |
          mkdir -p deployment
          cp -r *.js *.json middleware models routes utils config deployment/
          if [ -d "./client/build" ]; then
            mkdir -p deployment/client/build
            cp -r client/build/* deployment/client/build/
          fi
          cp Dockerfile Procfile docker-compose.yml .env.example deployment/ || true
          cd deployment && tar -czvf ../car-exchange-module.tar.gz .
      
      # Upload artifacts
      - name: Upload deployment package
        uses: actions/upload-artifact@v3
        with:
          name: deployment-package
          path: car-exchange-module.tar.gz
  
  # Deploy to Render (example)
  deploy-render:
    name: Deploy to Render
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    environment:
      name: production
      url: https://car-exchange-module.onrender.com
    
    steps:
      - name: Deploy to Render
        run: |
          curl -X POST ${{ secrets.RENDER_DEPLOY_HOOK }}
      
      - name: Verify deployment
        run: |
          echo "Deployment triggered. Check Render dashboard for details."
          echo "URL: https://car-exchange-module.onrender.com"
